/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/Ypn9nDY3aPx
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import Link from "next/link";
import {
  CardTitle,
  CardDescription,
  CardContent,
  Card,
} from "@/components/ui/card";
import Image from "next/image";
import { client } from "@/lib/client";
import { Profile, profileSchema } from "@/types/profile";
import { getDictionary } from "./dictionaries";
import { Projects, projectsSchema } from "@/types/project";
import { Separator } from "@/components/ui/separator";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { SVGProps } from "react";
import { LANGUAGES, Language } from "@/types/language";

const fetchProfileData = async () => {
  const profile = await client.get<Profile>({
    endpoint: "profile",
  });
  // Validate the fetched data using Zod schema
  return profileSchema.parse(profile);
};

const fetchProjectsData = async () => {
  const projects = await client.get<Projects>({
    endpoint: "projects",
  });
  // Validate the fetched data using Zod schema
  return projectsSchema.parse(projects);
};

export default async function Home({
  params: { lang },
}: {
  params: { lang: Language };
}) {
  const dict = await getDictionary(lang);

  const profile = await fetchProfileData();

  const projects = await fetchProjectsData();

  const name = lang === "en" ? profile.name.name_en : profile.name.name_ja;

  const jobTitle =
    lang === "en"
      ? profile.job_title.job_title_en
      : profile.job_title.job_title_ja;

  const description =
    lang === "en"
      ? profile.description.description_en
      : profile.description.description_ja;

  return (
    <main className="flex flex-col min-h-[100dvh]">
      <div className="flex items-center justify-between px-4 md:px-6 py-4 border-b">
        <div className="flex items-center gap-4">
          <Link href="#" target="_blank">
            <LinkedinIcon className="h-6 w-6 text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50" />
          </Link>
          <Link href="#" target="_blank">
            <GithubIcon className="h-6 w-6 text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50" />
          </Link>
        </div>
        <div className="flex items-center gap-4">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button size="icon" variant="outline">
                <LanguagesIcon className="h-6 w-6" />
                <span className="sr-only">{dict.language}</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              {LANGUAGES.map((language, index) => (
                <DropdownMenuItem key={`${language.code}-${index}`}>
                  <Link
                    className={`${
                      lang === language.code
                        ? "text-green-500"
                        : "text-gray-500"
                    }`}
                    href={`/${language.code}`}
                  >
                    {language.name}
                  </Link>
                </DropdownMenuItem>
              ))}
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
      <section className="w-full py-12 md:py-24 lg:py-32 xl:py-48">
        <div className="container px-4 md:px-6">
          <div className="flex flex-col items-center space-y-4 text-center">
            <div className="space-y-2">
              <h1 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl lg:text-6xl/none">
                {name}
              </h1>
              <p className="mx-auto max-w-[700px] text-gray-500 md:text-xl dark:text-gray-400">
                {jobTitle}
              </p>
              <p className="mx-auto max-w-[700px] text-gray-500 md:text-xl dark:text-gray-400">
                {description}
              </p>
            </div>
            <div className="space-x-4">
              <Link
                className="inline-flex h-9 items-center justify-center rounded-md bg-gray-900 px-4 py-2 text-sm font-medium text-gray-50 shadow transition-colors hover:bg-gray-900/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-950 disabled:pointer-events-none disabled:opacity-50 dark:bg-gray-50 dark:text-gray-900 dark:hover:bg-gray-50/90 dark:focus-visible:ring-gray-300"
                href={`/${lang}/resume.pdf`}
                locale={false}
              >
                {dict.button.download_resume}
              </Link>
            </div>
          </div>
        </div>
      </section>
      <section className="w-full py-12 md:py-24 lg:py-32 bg-gray-100 dark:bg-gray-800">
        <div className="container px-4 md:px-6">
          <div className="flex flex-col items-center space-y-4 text-center">
            <div className="space-y-2">
              <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
                {dict.projects.title}
              </h2>
              <p className="mx-auto max-w-[700px] text-gray-500 md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed dark:text-gray-400">
                {dict.projects.description}
              </p>
            </div>
          </div>
          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {projects.contents.map((project) => (
              <Card key={project.id}>
                <Image
                  alt="Project Thumbnail"
                  className="mx-auto aspect-video overflow-hidden rounded-xl object-cover object-center sm:w-full"
                  height="310"
                  src={project.image.url}
                  width="550"
                />
                <CardContent className="space-y-2 p-4">
                  <CardTitle>
                    {lang === "en"
                      ? project.title.title_en
                      : project.title.title_ja}
                  </CardTitle>
                  <CardDescription>
                    {lang === "en"
                      ? project.description.description_en
                      : project.description.description_ja}
                  </CardDescription>
                  <div className="flex items-center gap-2">
                    <Link
                      className="text-sm font-medium underline"
                      href={project.project_url}
                      target="_blank"
                    >
                      {dict.projects.link.project}
                    </Link>
                    <Separator className="h-4" orientation="vertical" />
                    <Link
                      className="text-sm font-medium underline"
                      href={project.github_url}
                      target="_blank"
                    >
                      {dict.projects.link.github}
                    </Link>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>
    </main>
  );
}

function GithubIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4" />
      <path d="M9 18c-4.51 2-5-2-7-2" />
    </svg>
  );
}

function LanguagesIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m5 8 6 6" />
      <path d="m4 14 6-6 2-3" />
      <path d="M2 5h12" />
      <path d="M7 2h1" />
      <path d="m22 22-5-10-5 10" />
      <path d="M14 18h6" />
    </svg>
  );
}

function LinkedinIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z" />
      <rect width="4" height="12" x="2" y="9" />
      <circle cx="4" cy="4" r="2" />
    </svg>
  );
}
